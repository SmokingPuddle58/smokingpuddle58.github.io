[{"content":"Smoothing spatial filters are used mainly for noise reduction, reduce aliasing and some irrelevant details in the image. There are different types of such filters, which will be introduced below.\nBox Filter Kernels This is the most simple filter kernel. This filter can be created by creating an $m\\times n$ array with all 1\u0026rsquo;s, then every element is divided by the sum of coefficients in the array (In this case, $\\frac{1}{mn}$). To create such a kernel in numpy, we can use the following code.\n1 averaging_filter = np.ones((m,n)) / (m * n) For example, a $3\\times 3$ averaging filter will look like this:\n$$ \\begin{bmatrix} \\frac{1}{9} \u0026amp; \\frac{1}{9} \u0026amp; \\frac{1}{9} \\\\ \u0026amp; \\\\ \\frac{1}{9} \u0026amp; \\frac{1}{9} \u0026amp; \\frac{1}{9} \\\\ \u0026amp; \\\\ \\frac{1}{9} \u0026amp; \\frac{1}{9} \u0026amp; \\frac{1}{9} \\\\ \\end{bmatrix} $$\nThe filter are suitable for quick experimentation. However, it is a poor approximation to blurring characteristics of lenses, also the filter only favor blurring along prependicular directions.\nLowpass Gaussian Filter Kernels Gaussian kernel is the only circularly symmetric kernels that are separable. It is in the following form.\n$$w(s,t) = G(s,t) = \\frac{1}{2\\pi\\sigma}e^{-\\frac{s^2+t^2}{2\\sigma^2}}$$\nIt is possible to derive arbitrary $n\\times n$ Gaussian filter kernels for given $\\sigma$, where $n$ is odd number.\nThe center of the Gaussian filter $(x,y)$ must be 0. The following is a example of $3\\times 3$ matrix for calculating Gaussian filter:\n$$ \\left[\\begin{array}{ccc} (- 1, - 1) \u0026amp; (0, - 1) \u0026amp; (1, - 1)\\\\ (- 1, 0) \u0026amp; (0, 0) \u0026amp; (1, 0)\\\\ (- 1, 1) \u0026amp; (0, 1) \u0026amp; (1, 1)\\\\ \\end{array}\\right] $$\nSubstitude the value of $x,y$ and $\\sigma$ into the formula stated above, performing normalization, we can then get the Gaussian filter. In this case, for simplicity, if we let $\\sigma=1$, then we have the kernel to be:\n$$ \\left[\\begin{array}{ccc} (- 1, - 1) \u0026amp; (0, - 1) \u0026amp; (1, - 1)\\\\ (- 1, 0) \u0026amp; (0, 0) \u0026amp; (1, 0)\\\\ (- 1, 1) \u0026amp; (0, 1) \u0026amp; (1, 1)\\\\ \\end{array}\\right] $$\nMedian Filter Kernel - Non-linear Filter Kernel A non-linear filter will examine neighbours using various orderings, one of the most common one is order statistics. While a linear filter is a linear operation that its\u0026rsquo; output can be expressed as the convolution of image with filter. Moreover, linear filters have corresponding frequency domain filter.\nAmong the non-linear filter kernel, one of the most popular one is median filter. It examines the neighbourhood pixels, and find the median of the window. The filter kernel preserves edges, while removing impulse noise, and it avoids excessive smoothing.\n","date":"2024-03-03T00:00:00Z","permalink":"https://smokingpuddle58.github.io/blog/p/spatial-filters/","title":"Smoothing (Lowpass) Spatial Filters"},{"content":"Hello World! This is my first blog.\n1 2 3 4 5 6 7 8 #include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34; \u0026lt;\u0026lt; endl; return 0; } ","date":"2023-09-09T00:00:00Z","permalink":"https://smokingpuddle58.github.io/blog/p/hello-world/","title":"First Blog"}]