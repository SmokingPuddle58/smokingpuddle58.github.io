[{"content":"Hello World! This is my first blog.\n1 2 3 4 5 6 7 8 #include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34; \u0026lt;\u0026lt; endl; return 0; } ","date":"2023-09-09T00:00:00Z","permalink":"https://smokingpuddle58.github.io/blog/p/hello-world/","title":"First Blog"},{"content":"Smoothing (Lowpass) Spatial Filters Smoothing spatial filters are used mainly for noise reduction, reduce aliasing and some irrelevant details in the image. There are different types of such filters, which will be introduced below.\nBox Filter Kernels This is the most simple filter kernel. This filter can be created by creating an $m\\times n$ array with all 1\u0026rsquo;s, then every element is divided by the sum of coefficients in the array (In this case, $\\frac{1}{mn}$). To create such a kernel in numpy, we can use the following code.\n1 averaging_filter = np.ones((m,n)) / (m * n) For example, a $3\\times 3$ averaging filter will look like this:\n$$ \\begin{bmatrix} \\frac{1}{9} \u0026amp; \\frac{1}{9} \u0026amp; \\frac{1}{9} \\\\ \u0026amp; \\\\ \\frac{1}{9} \u0026amp; \\frac{1}{9} \u0026amp; \\frac{1}{9} \\\\ \u0026amp; \\\\ \\frac{1}{9} \u0026amp; \\frac{1}{9} \u0026amp; \\frac{1}{9} \\\\ \\end{bmatrix} $$\nThe filter are suitable for quick experimentation. However, it is a poor approximation to blurring characteristics of lenses, also the filter only favor blurring along prependicular directions.\nLowpass Gaussian Filter Kernels Gaussian kernel is the only circularly symmetric kernels that are separable. It is in the following form.\n$$w(s,t) = G(s,t) = Ke^{-\\frac{s^2+t^2}{2\\sigma^2}}$$\nIt is possible to derive arbitrary $n\\times n$ Gaussian filter kernels for given $\\sigma$.\n","date":"2023-09-09T00:00:00Z","permalink":"https://smokingpuddle58.github.io/blog/p/spatial-filters/","title":"Spatial Filters"}]